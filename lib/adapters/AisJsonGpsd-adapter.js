/* 
 * Copyright 2014 Fulup Ar Foll.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This adapter handle JSON AIS messages as generated by http://www.catb.org/gpsd/
 * Reference: http://www.catb.org/gpsd/client-howto.html
 */

var Debug       = require("../GpsdDebug");
var Vessel      = require('../GpsdTcpFeed'); // make each vessel a fake imei device

// Adapter is an object own by a given device controler that handle data connection
DevAdapter = function(controler) {
    this.uid      = "DevAdaptater:" + "aisjson";
    this.info      = 'AisGpsd';
    this.control   = 'tcpfeed';
    this.debug     = controler.debug;    // inherit debug from controler
    this.controler = controler;          // keep a link to device controler and TCP socket
    this.lineidx   = 0;                  // index within buffer
    this.linebuf   = new Buffer (1024);  // intermediary buffer    
};

// Import debug method 
DevAdapter.prototype.Debug = Debug;

// This routine is called from GpsdControler each time a new buffer popup
// it splits buffer in full line, and keep remainding buffer for next
// round if ever line was not complete.
DevAdapter.prototype.ProcessData = function(bufferin) {
    
    this.Debug  (9, "request=[%s]", bufferin);
    
    // split buffer multiple lines if any and remove \r\n
    for (var idx=0; idx < bufferin.length; idx++) {
        switch (bufferin [idx]) {
            case 0x0A: // new line \n
                this.ProcessLine (this.linebuf.toString ('ascii',0, this.lineidx));
                this.lineidx=0;
                break;
            case 0x0D: break;  // cariage return \r
            default: 
                this.linebuf[this.lineidx] = bufferin [idx];
                this.lineidx++;
            }
    }
};
    
// Process a full line Gpsd/Json send one object per line 
DevAdapter.prototype.ProcessLine = function(line) {
    var data=[];
    var gpsd=this.controler.gpsd; 
    
    this.Debug  (8, "line=[%s]", line);

    // gpsd is very gentle and send a direct json stream :)
    try {
        var ais = JSON.parse(line);
    } catch (err) {
        this.Debug  (5, "Invalid Json line=[%s]", line);
        return;
    }
        
    // ignore anything that is not an AIS message
    if (ais.class !== "AIS") return;
        
    /* we handle static AIS message type 5,24 as authentication request
     * and message 1,2,3,18 and position update resquest
     * check ../GpsdAisDecode for more information on message types  */
    switch (ais.type) {
        case 1:
        case 2:
        case 3:
        case 18:
            data.cmd= "TRACKER";
            data.imei = ais.mmsi;   // make a fake imei for vessel mmsi
            data.lat  = ais.lat;
            data.lon  = ais.lon;
            data.speed= ais.speed;
            data.crs  = ais.course;
            data.alt  = 0;          // this is a boat it does not hick mountains!!! 
            data.date = new Date(); // use computer time 
            
            // if we exist in active client and we're log then update position now
            vessel = gpsd.activeClients [ais.mmsi];
            if (vessel !== undefined) {        // vessel has sent its static info
                if (vessel.loged) {            // vessel is known from DB
                    vessel.ProcessData (data); // update ship position in DB
                }
            }
            break;
        
        // 1st time when we get a vessel static info we check its authentication
        case 5:  // static information class A
        case 24: // static information class B
            data.cmd  ="LOGIN";
            data.imei = ais.mmsi;     // make a fake imei for vessel mmsi
            data.name = ais.shipname;
            
            // if device is not in active list we force a new object to keep track of it
            if (gpsd.activeClients [ais.mmsi] === undefined) {
                var vessel = new Vessel (this ,ais.mmsi);
                
                // if we have shipname update vessel even is unknown from DB
                if (ais.shipname !== undefined) vessel.name = ais.shipname;
                // force authent [due to DB delay we ignore first AIS paquets]
                data = {
                    imei : ais.mmsi,
                    cmd  : "LOGIN"
                };
                vessel.ProcessData (data);
                gpsd.activeClients [ais.mmsi]= vessel;
            }
            break;
        default: // anything else is not supported
            return;            
    }
};

// send a command to activate GPSd service
DevAdapter.prototype.SendCommand = function(tcpfeed, action, arg1) {
        switch (action) {
        case "WELLCOME": // ask gspd to send json data
              tcpfeed.socket.write ('?WATCH={"enable":true,"json":true}');
              break;
        case 'LOGOUT':  // active client is update at GpsdTcpFeed level
            tcpfeed.socket.write ("## Logout: "+ this.controler.uid + '##\n');
            break;
        default: 
            this.Debug (1,"Hoops JsonAIS/Gpsd UNKN_CMD=[%s]", action);
            return (-1);     
        };
    // return OK status 
    this.Debug (5,"buffer=[%s]", this.packet);
    return (0);
};

DevAdapter.prototype.TestParser = function(data) {
       console.log ("\n#### Starting Test ####");
    for (var test in data) {
        data=this.ParseNmea(line);
       
        switch (data.cmd) {
            case 'AUTH':
                case 2:
                case 3:
                case 18:
                    console.log (' -->msg-18 mmsi=%d Lon=%d Lat=%d Speed=%d Course=%d, NavStatus=%s/%s'
                                , ais.mmsi, ais.lon, ais.lat, ais.sog, ais.cog, ais.navstatus, ais.GetNavStatus());
                    break;
                case 24:
                    console.log (' -->msg-24 mmsi=%d shipname=%s callsign=%s cargo=%s/%s length=%d width=%d'
                                , ais.mmsi,ais.shipname, ais.callsign, ais.cargo, ais.GetVesselType(),  ais.length, ais.width);
                    break;
                case 5:
                    console.log (' -->msg-05 mmsi=%d shipname=%s callsign=%s cargo=%s/%s draught=%d length=%d width=%d'
                                , ais.mmsi,ais.shipname, ais.callsign, ais.cargo, ais.GetVesselType(),ais.draught, ais.length, ais.width);
                break;
                default:
                    console.log (" ### hoop msg-%d ==> [%s] not implemented", ais.msgtype, ais.GetMsgType());
        }
    }
};

// if started as a main and not as module, then process test.
if (process.argv[1] === __filename)  {
    // Add here any paquet you would like to test
    testParser = { // ?WATCH={"enable":true,"json":true}
      device: {"class":"DEVICES","devices":[{"class":"DEVICE","path":"gpsd://localhost:1234","activated":"2014-09-29T13:13:04.280Z","flags":9,"driver":"Generic NMEA"},{"class":"DEVICE","path":"udp://10.10.100.101:29200","activated":"2014-09-29T13:13:04.280Z","flags":9,"driver":"AIVDM"},{"class":"DEVICE","path":"tcp://data.aishub.net:4299","activated":"2014-09-29T13:13:04.317Z","flags":9,"driver":"AIVDM"}]},
      watch:  {"class":"WATCH","enable":true,"json":true,"nmea":false,"raw":0,"scaled":false,"timing":false},
      ais18:  {"class":"AIS","device":"udp://10.10.100.101:29200","type":18,"repeat":0,"mmsi":227802200,"scaled":false,"reserved":0,"speed":0,"accuracy":false,"lon":-2703984,"lat":29024982,"course":3307,"heading":511,"second":46,"regional":0,"cs":true,"display":false,"dsc":true,"band":true,"msg22":true,"raim":true,"radio":917510},
      ais01:  {"class":"AIS","device":"tcp://data.aishub.net:4299","type":1,"repeat":0,"mmsi":228042600,"scaled":false,"status":7,"turn":0,"speed":0,"accuracy":false,"lon":-1074166,"lat":27899555,"course":2386,"heading":255,"second":54,"maneuver":0,"raim":false,"radio":119832},
      ais05:  {"class":"AIS","device":"tcp://data.aishub.net:4299","type":5,"repeat":0,"mmsi":227999300,"scaled":false,"imo":0,"ais_version":1,"callsign":"","shipname":"PROVENCE","shiptype":0,"to_bow":78,"to_stern":64,"to_port":9,"to_starboard":9,"epfd":1,"eta":"00-00T00:00Z","draught":0,"destination":"","dte":0},
      ais04:  {"class":"AIS","device":"udp://10.10.100.101:29200","type":4,"repeat":0,"mmsi":2288187,"scaled":false,"timestamp":"2014-09-29T14:40:02Z","accuracy":true,"lon":-2720337,"lat":29014960,"epfd":7,"raim":false,"radio":2250},
      ais07:  {"class":"AIS","device":"udp://10.10.100.101:29200","type":7,"repeat":0,"mmsi":2288187,"scaled":false,"mmsi1":992271300,"mmsi2":0,"mmsi3":0,"mmsi4":0},
      ais24:  {"class":"AIS","device":"tcp://data.aishub.net:4299","type":24,"repeat":0,"mmsi":227252350,"scaled":false,"shipname":"TRINQUETTE 4","shiptype":36,"vendorid":"SRTGH!L","callsign":"FAB9196","to_bow":11,"to_stern":1,"to_port":6,"to_starboard":0},
      ais26:  {"class":"AIS","device":"udp://10.10.100.101:29200","type":26,"repeat":0,"mmsi":372222000,"scaled":false,"addressed":false,"structured":false,"dest_mmsi":0,"app_id":0,"data":"516:3495a63e32ab7fa47a37e218a2bc0869d4f669f2f979a756ebb656b78ee42945db21804c61a9d769c69a9680a40ed7db8cbd2e78cca6fcedbc9f902e531f8be200","radio":0}
    };
    dummy       = [];  // dummy object for test
    dummy.debug = 9;
    devAdapter  = new DevAdapter (dummy);
    devAdapter.TestParser (testParser);
    console.log ("**** AisJson Test Done ****");
}

module.exports = DevAdapter; // http://openmymind.net/2012/2/3/Node-Require-and-Exports/
