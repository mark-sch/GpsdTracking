/* 
 * Copyright 2014 Fulup Ar Foll.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This adapter handle JSON AIS messages as generated by http://www.catb.org/gpsd/
 * Reference: http://www.catb.org/gpsd/client-howto.html
 */

var Debug        = require("../GpsdDebug");
var GpsdTcpClient= require('../GpsdTcpClient'); // make each device a fake imei device

// Adapter is an object own by a given device controler that handle data connection
DevAdapter = function(controler) {
    this.uid      = "DevAdapter:" + "aisjson";
    this.info      = 'AisGpsd';
    this.control   = 'tcpfeed';
    this.debug     =  controler.svcopts.debug;    // inherit debug from controler
    this.controler = controler;          // keep a link to device controler and TCP socket
   
};

// Import debug method 
DevAdapter.prototype.Debug = Debug;

// Ais as multiple devices attached to one single tcp session 
DevAdapter.prototype.ClientConnect = function (socket) {
    // in case we are facing gpsd send nmea watch command
    socket.write ('?WATCH={"enable":true,"json":true}');
    
    // attach line counter and tempry buffer to socket session 
    socket.lineidx   = 0;                       // index within buffer
    socket.linebuf   = new Buffer (256);        // intermediary buffer
    socket.count     = 0;

};

// Ais cannot logout device, they will exist with gpsd cleanup function
DevAdapter.prototype.ClientQuit = function (socket) {
};
    
DevAdapter.prototype.ParseBuffer = function(socket, buffer) {
    this.Debug  (9, "request=[%s]", buffer);
    
    // split buffer multiple lines if any and remove \r\n
    for (var idx=0; idx < buffer.length; idx++) {
        switch (buffer [idx]) {
            case 0x0A: // new line \n
                var status = this.ParseLine (socket, socket.linebuf.toString ('ascii',0, socket.lineidx));
                socket.lineidx=0;
                break;
            case 0x0D: break;  // cariage return \r
            default: 
                socket.linebuf[socket.lineidx] = buffer [idx];
                socket.lineidx++;
            }
    }
};
    
    
// Process a full line Gpsd/Json send one object per line 
DevAdapter.prototype.ProcessLine = function(line) {
    var data=[];
    var gpsd=this.controler.gpsd; 
    
    this.Debug  (8, "line=[%s]", line);

    // gpsd is very gentle and send a direct json stream :)
    try {
        var ais = JSON.parse(line);
    } catch (err) {
        this.Debug  (5, "Invalid Json line=[%s]", line);
        return;
    }
        
    // ignore anything that is not an AIS message
    if (ais.class !== "AIS") return;
    socket.count++;  // update line counter stat
    
    /* we handle static AIS message type 5,24 as authentication request
     * and message 1,2,3,18 and position update resquest
     * check ../GpsdAisDecode for more information on message types  */
    switch (ais.type) {
        case 1:
        case 2:
        case 3:
        case 18:
            data.cmd= "TRACKER";
            data.imei = ais.mmsi;   // make a fake imei for device mmsi
            data.lat  = ais.lat;
            data.lon  = ais.lon;
            data.speed= ais.speed;
            data.crs  = ais.course;
            data.alt  = 0;          // this is a boat it does not hick mountains!!! 
            data.date = new Date(); // use computer time 
            data.count= socket.count;
            
            // if we exist in active client and we're log then update position now
            device = gpsd.activeClients [ais.mmsi];
            if (device !== undefined) {        // device has sent its static info
                if (device.loged) {            // device is known from DB
                    device.ProcessData (data); // update ship position in DB
                }
            }
            break;
        
        // 1st time when we get a device static info we check its authentication
        case 5:  // static information class A
        case 24: // static information class B
            data.cmd  ="LOGIN";
            data.imei = ais.mmsi;     // make a fake imei for device mmsi
            data.name = ais.shipname;
            data.count= socket.count;
            
            // if device is not in active list we force a new object to keep track of it
            if (gpsd.activeClients [ais.mmsi] === undefined) {
                var device = new GpsdTcpClient (this ,ais.mmsi);
                
                // if we have shipname update device even is unknown from DB
                if (ais.shipname !== undefined) device.name = ais.shipname;
                // force authent [due to DB delay we ignore first AIS paquets]
                data = {
                    imei : ais.mmsi,
                    cmd  : "LOGIN"
                };
                device.ProcessData (data);
            }
            break;
        default: // anything else is not supported
            return;            
    }
};

// send a command to activate GPSd service
DevAdapter.prototype.SendCommand = function(tcpfeed, action, arg1) {
        switch (action) {
        case "WELLCOME": // ask gspd to send json data
              tcpfeed.socket.write ('?WATCH={"enable":true,"json":true}');
              break;
        case 'LOGOUT':  // active client is update at GpsdTcpFeed level
            tcpfeed.socket.write ("## Logout: "+ this.controler.uid + '##\n');
            break;
        default: 
            this.Debug (1,"Hoops JsonAIS/Gpsd UNKN_CMD=[%s]", action);
            return (-1);     
        };
    // return OK status 
    this.Debug (5,"buffer=[%s]", this.packet);
    return (0);
};

// if started as a main and not as module, then process test.
if (process.argv[1] === __filename)  {
    console.log ("**** AisJson No Test ****");
}

module.exports = DevAdapter; // http://openmymind.net/2012/2/3/Node-Require-and-Exports/
