{
  "name": "sgeo",
  "version": "0.0.3",
  "description": "Spherical coordinate library",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/soichih/node-sgeo"
  },
  "keywords": [
    "interpolation",
    "latitude",
    "longitude",
    "spherical",
    "geodesy"
  ],
  "author": {
    "name": "Chris Veness"
  },
  "contributors": [
    {
      "name": "Soichi Hayashi",
      "email": "soichih@gmail.com"
    }
  ],
  "license": "Creative Commons",
  "bugs": {
    "url": "https://github.com/soichih/node-sgeo/issues"
  },
  "homepage": "https://github.com/soichih/node-sgeo",
  "readme": "# Spherical coordinate library\n\nThis library lets you compute distance, bearing, interpolations (mid points), and many other functions from a set of latitude / longitude pairs. \nOriginal code comes from http://www.movable-type.co.uk/scripts/latlong.html by Chris Veness \n\n## Installation\n    npm install sgeo\n\n## Usage\n\n\n### parseDMS\n\nParses string representing degrees/minutes/seconds into numeric degrees.\n\nThis is very flexible on formats, allowing signed decimal degrees, or deg-min-sec optionally\nsuffixed by compass direction (NSEW). A variety of separators are accepted (eg 3ยบ 37' 09\"W) \nor fixed-width format without separators (eg 0033709W). Seconds and minutes may be omitted. \n(Note minimal validation is done).\n\n```javascript\nvar sgeo = require('sgeo');\n\nvar lat = sgeo.parseDMS('51 28 40.12 N');\nvar lon = sgeo.parseDMS('00 00 05.31 W');\n```\n\n### toDMS\n\nConvert decimal degrees to deg/min/sec format.\n\ndegree, prime, double-prime symbols are added, but sign is discarded, though no compass direction is added\n\n```\nvar dms = sgeo.toDMS(12.34544, 'dms', 2);\n```\n\n### latlon\n\nProvides various functionalities for geodesy calculations.\n\nInitializing coordinates\n\n```javascript\nvar sgeo = require('sgeo');\nvar p1 = new sgeo.latlon(51.0, -5.5);\nvar p2 = new sgeo.latlon(58.4778, -3.01);\n\nconsole.log(p1.lat); //display latitude\nconsole.log(p1.lng); //display longitude\nconsole.log(p1); //toString()\n```\n\nCalculate distance (in km)\n\n```javascript\nvar dist = p1.distanceTo(p2);      \nconsole.log(dist);\n```\n\n```\n846.6\n```\n\nCalculate bearing (in degress clockwise from north 0 - 360)\n\n```javascript\nvar brng = p1.bearingTo(p2);       \nconsole.log(brng);\n```\n\n```\n9.871855132189069\n```\n\nCalculate midpoint\n\n```javascript\nvar pm = p1.midpointTo(p2);       \nconsole.log(pm);\n```\n\n```\n{ lat: 54.74522196955371, lng: -4.3700915168517 }\n```\n\nmidpoint of multiple locations\n\n```javascript\nvar pm = sgeo.migpoint([p1, p2, p3]);\nconsole.log(pm);\n```\n\nInterpolate points between p1 and p2\n\n```javascript\nvar inp = p1.interpolate(p2, 5);\nconsole.dir(inp);\n```\n\n```\n[ { lat: 51, lng: -5.499999999999999 },\n  { lat: 52.87394889826373, lng: -4.959445475316697 },\n  { lat: 54.74522196955371, lng: -4.370091516851731 },\n  { lat: 56.613360847919104, lng: -3.7236677522713766 },\n  { lat: 58.47780000000001, lng: -3.0099999999999985 } ]\n\n```\n\n#### latlon.finalBeearingTo\n\nReturns final bearing arriving at supplied destination point from this point; the final bearing \nwill differ from the initial bearing by varying degrees according to distance and latitude\n\n#### latlon.destinationPoint\n\nReturns the destination point from this point having traveled the given distance (in km) on the\ngiven initial bearing (bearing may vary before destination is reached)\n\n#### latlon.intersection\n\nReturns the point of intersection of two paths defined by point and bearing\n\n#### latlon.rhumbDistanceTo\n\nReturns the distance from this point to the supplied point, in km, travelling along a rhumb line\n\n#### latlon.rhumbBearingTo\n\nReturns the bearing from this point to the supplied point along a rhumb line, in degrees\n\n#### latlon.rhumbDestinationPoint\n\nReturns the destination point from this point having traveled the given distance (in km) on the given bearing along a rhumb line\n\n#### latlon.rhumbMidpointTo\n\nReturns the loxodromic midpoint (along a rhumb line) between this point and the supplied point.\n\n#### sgeo.toLat \n\nConvert numeric degrees to deg/min/sec latitude (suffixed with N/S)\n\n#### sgeo.toLon \n\nConvert numeric degrees to deg/min/sec longitude (suffixed with E/W)\n\n#### sgeo.toBrng \n\nConvert numeric degrees to deg/min/sec as a bearing\n\n## Attribution\n\nMost of the code was originally written by Chris Veness at http://www.movable-type.co.uk/scripts/latlong.html\n\n",
  "readmeFilename": "README.md",
  "_id": "sgeo@0.0.3",
  "_from": "sgeo@"
}
